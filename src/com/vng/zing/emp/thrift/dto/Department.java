/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vng.zing.emp.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Department implements org.apache.thrift.TBase<Department, Department._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Department");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("department_code", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("department_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_MNG_FIELD_DESC = new org.apache.thrift.protocol.TField("department_mng", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DepartmentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DepartmentTupleSchemeFactory());
  }

  public int id; // required
  public String department_code; // required
  public String department_name; // required
  public int department_mng; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DEPARTMENT_CODE((short)2, "department_code"),
    DEPARTMENT_NAME((short)3, "department_name"),
    DEPARTMENT_MNG((short)4, "department_mng");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DEPARTMENT_CODE
          return DEPARTMENT_CODE;
        case 3: // DEPARTMENT_NAME
          return DEPARTMENT_NAME;
        case 4: // DEPARTMENT_MNG
          return DEPARTMENT_MNG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DEPARTMENT_MNG_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPARTMENT_CODE, new org.apache.thrift.meta_data.FieldMetaData("department_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPARTMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("department_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPARTMENT_MNG, new org.apache.thrift.meta_data.FieldMetaData("department_mng", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Department.class, metaDataMap);
  }

  public Department() {
  }

  public Department(
    int id,
    String department_code,
    String department_name,
    int department_mng)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.department_code = department_code;
    this.department_name = department_name;
    this.department_mng = department_mng;
    setDepartment_mngIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Department(Department other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetDepartment_code()) {
      this.department_code = other.department_code;
    }
    if (other.isSetDepartment_name()) {
      this.department_name = other.department_name;
    }
    this.department_mng = other.department_mng;
  }

  public Department deepCopy() {
    return new Department(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.department_code = null;
    this.department_name = null;
    setDepartment_mngIsSet(false);
    this.department_mng = 0;
  }

  public int getId() {
    return this.id;
  }

  public Department setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getDepartment_code() {
    return this.department_code;
  }

  public Department setDepartment_code(String department_code) {
    this.department_code = department_code;
    return this;
  }

  public void unsetDepartment_code() {
    this.department_code = null;
  }

  /** Returns true if field department_code is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartment_code() {
    return this.department_code != null;
  }

  public void setDepartment_codeIsSet(boolean value) {
    if (!value) {
      this.department_code = null;
    }
  }

  public String getDepartment_name() {
    return this.department_name;
  }

  public Department setDepartment_name(String department_name) {
    this.department_name = department_name;
    return this;
  }

  public void unsetDepartment_name() {
    this.department_name = null;
  }

  /** Returns true if field department_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartment_name() {
    return this.department_name != null;
  }

  public void setDepartment_nameIsSet(boolean value) {
    if (!value) {
      this.department_name = null;
    }
  }

  public int getDepartment_mng() {
    return this.department_mng;
  }

  public Department setDepartment_mng(int department_mng) {
    this.department_mng = department_mng;
    setDepartment_mngIsSet(true);
    return this;
  }

  public void unsetDepartment_mng() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPARTMENT_MNG_ISSET_ID);
  }

  /** Returns true if field department_mng is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartment_mng() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPARTMENT_MNG_ISSET_ID);
  }

  public void setDepartment_mngIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPARTMENT_MNG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case DEPARTMENT_CODE:
      if (value == null) {
        unsetDepartment_code();
      } else {
        setDepartment_code((String)value);
      }
      break;

    case DEPARTMENT_NAME:
      if (value == null) {
        unsetDepartment_name();
      } else {
        setDepartment_name((String)value);
      }
      break;

    case DEPARTMENT_MNG:
      if (value == null) {
        unsetDepartment_mng();
      } else {
        setDepartment_mng((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case DEPARTMENT_CODE:
      return getDepartment_code();

    case DEPARTMENT_NAME:
      return getDepartment_name();

    case DEPARTMENT_MNG:
      return Integer.valueOf(getDepartment_mng());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DEPARTMENT_CODE:
      return isSetDepartment_code();
    case DEPARTMENT_NAME:
      return isSetDepartment_name();
    case DEPARTMENT_MNG:
      return isSetDepartment_mng();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Department)
      return this.equals((Department)that);
    return false;
  }

  public boolean equals(Department that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_department_code = true && this.isSetDepartment_code();
    boolean that_present_department_code = true && that.isSetDepartment_code();
    if (this_present_department_code || that_present_department_code) {
      if (!(this_present_department_code && that_present_department_code))
        return false;
      if (!this.department_code.equals(that.department_code))
        return false;
    }

    boolean this_present_department_name = true && this.isSetDepartment_name();
    boolean that_present_department_name = true && that.isSetDepartment_name();
    if (this_present_department_name || that_present_department_name) {
      if (!(this_present_department_name && that_present_department_name))
        return false;
      if (!this.department_name.equals(that.department_name))
        return false;
    }

    boolean this_present_department_mng = true;
    boolean that_present_department_mng = true;
    if (this_present_department_mng || that_present_department_mng) {
      if (!(this_present_department_mng && that_present_department_mng))
        return false;
      if (this.department_mng != that.department_mng)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Department other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Department typedOther = (Department)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartment_code()).compareTo(typedOther.isSetDepartment_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartment_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department_code, typedOther.department_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartment_name()).compareTo(typedOther.isSetDepartment_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartment_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department_name, typedOther.department_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartment_mng()).compareTo(typedOther.isSetDepartment_mng());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartment_mng()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department_mng, typedOther.department_mng);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Department(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("department_code:");
    if (this.department_code == null) {
      sb.append("null");
    } else {
      sb.append(this.department_code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("department_name:");
    if (this.department_name == null) {
      sb.append("null");
    } else {
      sb.append(this.department_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("department_mng:");
    sb.append(this.department_mng);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DepartmentStandardSchemeFactory implements SchemeFactory {
    public DepartmentStandardScheme getScheme() {
      return new DepartmentStandardScheme();
    }
  }

  private static class DepartmentStandardScheme extends StandardScheme<Department> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Department struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEPARTMENT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.department_code = iprot.readString();
              struct.setDepartment_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEPARTMENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.department_name = iprot.readString();
              struct.setDepartment_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEPARTMENT_MNG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.department_mng = iprot.readI32();
              struct.setDepartment_mngIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Department struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.department_code != null) {
        oprot.writeFieldBegin(DEPARTMENT_CODE_FIELD_DESC);
        oprot.writeString(struct.department_code);
        oprot.writeFieldEnd();
      }
      if (struct.department_name != null) {
        oprot.writeFieldBegin(DEPARTMENT_NAME_FIELD_DESC);
        oprot.writeString(struct.department_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEPARTMENT_MNG_FIELD_DESC);
      oprot.writeI32(struct.department_mng);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DepartmentTupleSchemeFactory implements SchemeFactory {
    public DepartmentTupleScheme getScheme() {
      return new DepartmentTupleScheme();
    }
  }

  private static class DepartmentTupleScheme extends TupleScheme<Department> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Department struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      BitSet optionals = new BitSet();
      if (struct.isSetDepartment_code()) {
        optionals.set(0);
      }
      if (struct.isSetDepartment_name()) {
        optionals.set(1);
      }
      if (struct.isSetDepartment_mng()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDepartment_code()) {
        oprot.writeString(struct.department_code);
      }
      if (struct.isSetDepartment_name()) {
        oprot.writeString(struct.department_name);
      }
      if (struct.isSetDepartment_mng()) {
        oprot.writeI32(struct.department_mng);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Department struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.department_code = iprot.readString();
        struct.setDepartment_codeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.department_name = iprot.readString();
        struct.setDepartment_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.department_mng = iprot.readI32();
        struct.setDepartment_mngIsSet(true);
      }
    }
  }

}

