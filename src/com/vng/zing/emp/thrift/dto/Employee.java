/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vng.zing.emp.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Employee implements org.apache.thrift.TBase<Employee, Employee._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Employee");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EMP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("emp_code", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EMP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("emp_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DOB_FIELD_DESC = new org.apache.thrift.protocol.TField("dob", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("phone_number", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IDENTIFICATION_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("identification_card", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DATE_JOIN_FIELD_DESC = new org.apache.thrift.protocol.TField("date_join", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DATE_LEFT_FIELD_DESC = new org.apache.thrift.protocol.TField("date_left", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("note", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField EMP_MNG_FIELD_DESC = new org.apache.thrift.protocol.TField("emp_mng", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField EMP_DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("emp_department", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField EMP_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("emp_title", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EmployeeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EmployeeTupleSchemeFactory());
  }

  public int id; // required
  public String emp_code; // required
  public String emp_name; // required
  public String gender; // required
  public String dob; // required
  public String address; // required
  public String phone_number; // required
  public String identification_card; // required
  public String date_join; // required
  public String date_left; // required
  public String note; // required
  public int emp_mng; // required
  public int emp_department; // required
  public int emp_title; // required
  public int role; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    EMP_CODE((short)2, "emp_code"),
    EMP_NAME((short)3, "emp_name"),
    GENDER((short)4, "gender"),
    DOB((short)5, "dob"),
    ADDRESS((short)6, "address"),
    PHONE_NUMBER((short)7, "phone_number"),
    IDENTIFICATION_CARD((short)8, "identification_card"),
    DATE_JOIN((short)9, "date_join"),
    DATE_LEFT((short)10, "date_left"),
    NOTE((short)11, "note"),
    EMP_MNG((short)12, "emp_mng"),
    EMP_DEPARTMENT((short)13, "emp_department"),
    EMP_TITLE((short)14, "emp_title"),
    ROLE((short)15, "role");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // EMP_CODE
          return EMP_CODE;
        case 3: // EMP_NAME
          return EMP_NAME;
        case 4: // GENDER
          return GENDER;
        case 5: // DOB
          return DOB;
        case 6: // ADDRESS
          return ADDRESS;
        case 7: // PHONE_NUMBER
          return PHONE_NUMBER;
        case 8: // IDENTIFICATION_CARD
          return IDENTIFICATION_CARD;
        case 9: // DATE_JOIN
          return DATE_JOIN;
        case 10: // DATE_LEFT
          return DATE_LEFT;
        case 11: // NOTE
          return NOTE;
        case 12: // EMP_MNG
          return EMP_MNG;
        case 13: // EMP_DEPARTMENT
          return EMP_DEPARTMENT;
        case 14: // EMP_TITLE
          return EMP_TITLE;
        case 15: // ROLE
          return ROLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __EMP_MNG_ISSET_ID = 1;
  private static final int __EMP_DEPARTMENT_ISSET_ID = 2;
  private static final int __EMP_TITLE_ISSET_ID = 3;
  private static final int __ROLE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMP_CODE, new org.apache.thrift.meta_data.FieldMetaData("emp_code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMP_NAME, new org.apache.thrift.meta_data.FieldMetaData("emp_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOB, new org.apache.thrift.meta_data.FieldMetaData("dob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("phone_number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTIFICATION_CARD, new org.apache.thrift.meta_data.FieldMetaData("identification_card", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_JOIN, new org.apache.thrift.meta_data.FieldMetaData("date_join", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_LEFT, new org.apache.thrift.meta_data.FieldMetaData("date_left", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTE, new org.apache.thrift.meta_data.FieldMetaData("note", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMP_MNG, new org.apache.thrift.meta_data.FieldMetaData("emp_mng", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMP_DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("emp_department", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMP_TITLE, new org.apache.thrift.meta_data.FieldMetaData("emp_title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Employee.class, metaDataMap);
  }

  public Employee() {
  }

  public Employee(
    int id,
    String emp_code,
    String emp_name,
    String gender,
    String dob,
    String address,
    String phone_number,
    String identification_card,
    String date_join,
    String date_left,
    String note,
    int emp_mng,
    int emp_department,
    int emp_title,
    int role)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.emp_code = emp_code;
    this.emp_name = emp_name;
    this.gender = gender;
    this.dob = dob;
    this.address = address;
    this.phone_number = phone_number;
    this.identification_card = identification_card;
    this.date_join = date_join;
    this.date_left = date_left;
    this.note = note;
    this.emp_mng = emp_mng;
    setEmp_mngIsSet(true);
    this.emp_department = emp_department;
    setEmp_departmentIsSet(true);
    this.emp_title = emp_title;
    setEmp_titleIsSet(true);
    this.role = role;
    setRoleIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Employee(Employee other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetEmp_code()) {
      this.emp_code = other.emp_code;
    }
    if (other.isSetEmp_name()) {
      this.emp_name = other.emp_name;
    }
    if (other.isSetGender()) {
      this.gender = other.gender;
    }
    if (other.isSetDob()) {
      this.dob = other.dob;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetPhone_number()) {
      this.phone_number = other.phone_number;
    }
    if (other.isSetIdentification_card()) {
      this.identification_card = other.identification_card;
    }
    if (other.isSetDate_join()) {
      this.date_join = other.date_join;
    }
    if (other.isSetDate_left()) {
      this.date_left = other.date_left;
    }
    if (other.isSetNote()) {
      this.note = other.note;
    }
    this.emp_mng = other.emp_mng;
    this.emp_department = other.emp_department;
    this.emp_title = other.emp_title;
    this.role = other.role;
  }

  public Employee deepCopy() {
    return new Employee(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.emp_code = null;
    this.emp_name = null;
    this.gender = null;
    this.dob = null;
    this.address = null;
    this.phone_number = null;
    this.identification_card = null;
    this.date_join = null;
    this.date_left = null;
    this.note = null;
    setEmp_mngIsSet(false);
    this.emp_mng = 0;
    setEmp_departmentIsSet(false);
    this.emp_department = 0;
    setEmp_titleIsSet(false);
    this.emp_title = 0;
    setRoleIsSet(false);
    this.role = 0;
  }

  public int getId() {
    return this.id;
  }

  public Employee setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getEmp_code() {
    return this.emp_code;
  }

  public Employee setEmp_code(String emp_code) {
    this.emp_code = emp_code;
    return this;
  }

  public void unsetEmp_code() {
    this.emp_code = null;
  }

  /** Returns true if field emp_code is set (has been assigned a value) and false otherwise */
  public boolean isSetEmp_code() {
    return this.emp_code != null;
  }

  public void setEmp_codeIsSet(boolean value) {
    if (!value) {
      this.emp_code = null;
    }
  }

  public String getEmp_name() {
    return this.emp_name;
  }

  public Employee setEmp_name(String emp_name) {
    this.emp_name = emp_name;
    return this;
  }

  public void unsetEmp_name() {
    this.emp_name = null;
  }

  /** Returns true if field emp_name is set (has been assigned a value) and false otherwise */
  public boolean isSetEmp_name() {
    return this.emp_name != null;
  }

  public void setEmp_nameIsSet(boolean value) {
    if (!value) {
      this.emp_name = null;
    }
  }

  public String getGender() {
    return this.gender;
  }

  public Employee setGender(String gender) {
    this.gender = gender;
    return this;
  }

  public void unsetGender() {
    this.gender = null;
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return this.gender != null;
  }

  public void setGenderIsSet(boolean value) {
    if (!value) {
      this.gender = null;
    }
  }

  public String getDob() {
    return this.dob;
  }

  public Employee setDob(String dob) {
    this.dob = dob;
    return this;
  }

  public void unsetDob() {
    this.dob = null;
  }

  /** Returns true if field dob is set (has been assigned a value) and false otherwise */
  public boolean isSetDob() {
    return this.dob != null;
  }

  public void setDobIsSet(boolean value) {
    if (!value) {
      this.dob = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public Employee setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getPhone_number() {
    return this.phone_number;
  }

  public Employee setPhone_number(String phone_number) {
    this.phone_number = phone_number;
    return this;
  }

  public void unsetPhone_number() {
    this.phone_number = null;
  }

  /** Returns true if field phone_number is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone_number() {
    return this.phone_number != null;
  }

  public void setPhone_numberIsSet(boolean value) {
    if (!value) {
      this.phone_number = null;
    }
  }

  public String getIdentification_card() {
    return this.identification_card;
  }

  public Employee setIdentification_card(String identification_card) {
    this.identification_card = identification_card;
    return this;
  }

  public void unsetIdentification_card() {
    this.identification_card = null;
  }

  /** Returns true if field identification_card is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentification_card() {
    return this.identification_card != null;
  }

  public void setIdentification_cardIsSet(boolean value) {
    if (!value) {
      this.identification_card = null;
    }
  }

  public String getDate_join() {
    return this.date_join;
  }

  public Employee setDate_join(String date_join) {
    this.date_join = date_join;
    return this;
  }

  public void unsetDate_join() {
    this.date_join = null;
  }

  /** Returns true if field date_join is set (has been assigned a value) and false otherwise */
  public boolean isSetDate_join() {
    return this.date_join != null;
  }

  public void setDate_joinIsSet(boolean value) {
    if (!value) {
      this.date_join = null;
    }
  }

  public String getDate_left() {
    return this.date_left;
  }

  public Employee setDate_left(String date_left) {
    this.date_left = date_left;
    return this;
  }

  public void unsetDate_left() {
    this.date_left = null;
  }

  /** Returns true if field date_left is set (has been assigned a value) and false otherwise */
  public boolean isSetDate_left() {
    return this.date_left != null;
  }

  public void setDate_leftIsSet(boolean value) {
    if (!value) {
      this.date_left = null;
    }
  }

  public String getNote() {
    return this.note;
  }

  public Employee setNote(String note) {
    this.note = note;
    return this;
  }

  public void unsetNote() {
    this.note = null;
  }

  /** Returns true if field note is set (has been assigned a value) and false otherwise */
  public boolean isSetNote() {
    return this.note != null;
  }

  public void setNoteIsSet(boolean value) {
    if (!value) {
      this.note = null;
    }
  }

  public int getEmp_mng() {
    return this.emp_mng;
  }

  public Employee setEmp_mng(int emp_mng) {
    this.emp_mng = emp_mng;
    setEmp_mngIsSet(true);
    return this;
  }

  public void unsetEmp_mng() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EMP_MNG_ISSET_ID);
  }

  /** Returns true if field emp_mng is set (has been assigned a value) and false otherwise */
  public boolean isSetEmp_mng() {
    return EncodingUtils.testBit(__isset_bitfield, __EMP_MNG_ISSET_ID);
  }

  public void setEmp_mngIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EMP_MNG_ISSET_ID, value);
  }

  public int getEmp_department() {
    return this.emp_department;
  }

  public Employee setEmp_department(int emp_department) {
    this.emp_department = emp_department;
    setEmp_departmentIsSet(true);
    return this;
  }

  public void unsetEmp_department() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EMP_DEPARTMENT_ISSET_ID);
  }

  /** Returns true if field emp_department is set (has been assigned a value) and false otherwise */
  public boolean isSetEmp_department() {
    return EncodingUtils.testBit(__isset_bitfield, __EMP_DEPARTMENT_ISSET_ID);
  }

  public void setEmp_departmentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EMP_DEPARTMENT_ISSET_ID, value);
  }

  public int getEmp_title() {
    return this.emp_title;
  }

  public Employee setEmp_title(int emp_title) {
    this.emp_title = emp_title;
    setEmp_titleIsSet(true);
    return this;
  }

  public void unsetEmp_title() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EMP_TITLE_ISSET_ID);
  }

  /** Returns true if field emp_title is set (has been assigned a value) and false otherwise */
  public boolean isSetEmp_title() {
    return EncodingUtils.testBit(__isset_bitfield, __EMP_TITLE_ISSET_ID);
  }

  public void setEmp_titleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EMP_TITLE_ISSET_ID, value);
  }

  public int getRole() {
    return this.role;
  }

  public Employee setRole(int role) {
    this.role = role;
    setRoleIsSet(true);
    return this;
  }

  public void unsetRole() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLE_ISSET_ID);
  }

  /** Returns true if field role is set (has been assigned a value) and false otherwise */
  public boolean isSetRole() {
    return EncodingUtils.testBit(__isset_bitfield, __ROLE_ISSET_ID);
  }

  public void setRoleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case EMP_CODE:
      if (value == null) {
        unsetEmp_code();
      } else {
        setEmp_code((String)value);
      }
      break;

    case EMP_NAME:
      if (value == null) {
        unsetEmp_name();
      } else {
        setEmp_name((String)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((String)value);
      }
      break;

    case DOB:
      if (value == null) {
        unsetDob();
      } else {
        setDob((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case PHONE_NUMBER:
      if (value == null) {
        unsetPhone_number();
      } else {
        setPhone_number((String)value);
      }
      break;

    case IDENTIFICATION_CARD:
      if (value == null) {
        unsetIdentification_card();
      } else {
        setIdentification_card((String)value);
      }
      break;

    case DATE_JOIN:
      if (value == null) {
        unsetDate_join();
      } else {
        setDate_join((String)value);
      }
      break;

    case DATE_LEFT:
      if (value == null) {
        unsetDate_left();
      } else {
        setDate_left((String)value);
      }
      break;

    case NOTE:
      if (value == null) {
        unsetNote();
      } else {
        setNote((String)value);
      }
      break;

    case EMP_MNG:
      if (value == null) {
        unsetEmp_mng();
      } else {
        setEmp_mng((Integer)value);
      }
      break;

    case EMP_DEPARTMENT:
      if (value == null) {
        unsetEmp_department();
      } else {
        setEmp_department((Integer)value);
      }
      break;

    case EMP_TITLE:
      if (value == null) {
        unsetEmp_title();
      } else {
        setEmp_title((Integer)value);
      }
      break;

    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case EMP_CODE:
      return getEmp_code();

    case EMP_NAME:
      return getEmp_name();

    case GENDER:
      return getGender();

    case DOB:
      return getDob();

    case ADDRESS:
      return getAddress();

    case PHONE_NUMBER:
      return getPhone_number();

    case IDENTIFICATION_CARD:
      return getIdentification_card();

    case DATE_JOIN:
      return getDate_join();

    case DATE_LEFT:
      return getDate_left();

    case NOTE:
      return getNote();

    case EMP_MNG:
      return Integer.valueOf(getEmp_mng());

    case EMP_DEPARTMENT:
      return Integer.valueOf(getEmp_department());

    case EMP_TITLE:
      return Integer.valueOf(getEmp_title());

    case ROLE:
      return Integer.valueOf(getRole());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case EMP_CODE:
      return isSetEmp_code();
    case EMP_NAME:
      return isSetEmp_name();
    case GENDER:
      return isSetGender();
    case DOB:
      return isSetDob();
    case ADDRESS:
      return isSetAddress();
    case PHONE_NUMBER:
      return isSetPhone_number();
    case IDENTIFICATION_CARD:
      return isSetIdentification_card();
    case DATE_JOIN:
      return isSetDate_join();
    case DATE_LEFT:
      return isSetDate_left();
    case NOTE:
      return isSetNote();
    case EMP_MNG:
      return isSetEmp_mng();
    case EMP_DEPARTMENT:
      return isSetEmp_department();
    case EMP_TITLE:
      return isSetEmp_title();
    case ROLE:
      return isSetRole();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Employee)
      return this.equals((Employee)that);
    return false;
  }

  public boolean equals(Employee that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_emp_code = true && this.isSetEmp_code();
    boolean that_present_emp_code = true && that.isSetEmp_code();
    if (this_present_emp_code || that_present_emp_code) {
      if (!(this_present_emp_code && that_present_emp_code))
        return false;
      if (!this.emp_code.equals(that.emp_code))
        return false;
    }

    boolean this_present_emp_name = true && this.isSetEmp_name();
    boolean that_present_emp_name = true && that.isSetEmp_name();
    if (this_present_emp_name || that_present_emp_name) {
      if (!(this_present_emp_name && that_present_emp_name))
        return false;
      if (!this.emp_name.equals(that.emp_name))
        return false;
    }

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (!this.gender.equals(that.gender))
        return false;
    }

    boolean this_present_dob = true && this.isSetDob();
    boolean that_present_dob = true && that.isSetDob();
    if (this_present_dob || that_present_dob) {
      if (!(this_present_dob && that_present_dob))
        return false;
      if (!this.dob.equals(that.dob))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_phone_number = true && this.isSetPhone_number();
    boolean that_present_phone_number = true && that.isSetPhone_number();
    if (this_present_phone_number || that_present_phone_number) {
      if (!(this_present_phone_number && that_present_phone_number))
        return false;
      if (!this.phone_number.equals(that.phone_number))
        return false;
    }

    boolean this_present_identification_card = true && this.isSetIdentification_card();
    boolean that_present_identification_card = true && that.isSetIdentification_card();
    if (this_present_identification_card || that_present_identification_card) {
      if (!(this_present_identification_card && that_present_identification_card))
        return false;
      if (!this.identification_card.equals(that.identification_card))
        return false;
    }

    boolean this_present_date_join = true && this.isSetDate_join();
    boolean that_present_date_join = true && that.isSetDate_join();
    if (this_present_date_join || that_present_date_join) {
      if (!(this_present_date_join && that_present_date_join))
        return false;
      if (!this.date_join.equals(that.date_join))
        return false;
    }

    boolean this_present_date_left = true && this.isSetDate_left();
    boolean that_present_date_left = true && that.isSetDate_left();
    if (this_present_date_left || that_present_date_left) {
      if (!(this_present_date_left && that_present_date_left))
        return false;
      if (!this.date_left.equals(that.date_left))
        return false;
    }

    boolean this_present_note = true && this.isSetNote();
    boolean that_present_note = true && that.isSetNote();
    if (this_present_note || that_present_note) {
      if (!(this_present_note && that_present_note))
        return false;
      if (!this.note.equals(that.note))
        return false;
    }

    boolean this_present_emp_mng = true;
    boolean that_present_emp_mng = true;
    if (this_present_emp_mng || that_present_emp_mng) {
      if (!(this_present_emp_mng && that_present_emp_mng))
        return false;
      if (this.emp_mng != that.emp_mng)
        return false;
    }

    boolean this_present_emp_department = true;
    boolean that_present_emp_department = true;
    if (this_present_emp_department || that_present_emp_department) {
      if (!(this_present_emp_department && that_present_emp_department))
        return false;
      if (this.emp_department != that.emp_department)
        return false;
    }

    boolean this_present_emp_title = true;
    boolean that_present_emp_title = true;
    if (this_present_emp_title || that_present_emp_title) {
      if (!(this_present_emp_title && that_present_emp_title))
        return false;
      if (this.emp_title != that.emp_title)
        return false;
    }

    boolean this_present_role = true;
    boolean that_present_role = true;
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (this.role != that.role)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Employee other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Employee typedOther = (Employee)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmp_code()).compareTo(typedOther.isSetEmp_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmp_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emp_code, typedOther.emp_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmp_name()).compareTo(typedOther.isSetEmp_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmp_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emp_name, typedOther.emp_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(typedOther.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, typedOther.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDob()).compareTo(typedOther.isSetDob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dob, typedOther.dob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(typedOther.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, typedOther.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone_number()).compareTo(typedOther.isSetPhone_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone_number, typedOther.phone_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentification_card()).compareTo(typedOther.isSetIdentification_card());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentification_card()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identification_card, typedOther.identification_card);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate_join()).compareTo(typedOther.isSetDate_join());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate_join()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date_join, typedOther.date_join);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate_left()).compareTo(typedOther.isSetDate_left());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate_left()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date_left, typedOther.date_left);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNote()).compareTo(typedOther.isSetNote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.note, typedOther.note);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmp_mng()).compareTo(typedOther.isSetEmp_mng());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmp_mng()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emp_mng, typedOther.emp_mng);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmp_department()).compareTo(typedOther.isSetEmp_department());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmp_department()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emp_department, typedOther.emp_department);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmp_title()).compareTo(typedOther.isSetEmp_title());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmp_title()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emp_title, typedOther.emp_title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRole()).compareTo(typedOther.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, typedOther.role);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Employee(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("emp_code:");
    if (this.emp_code == null) {
      sb.append("null");
    } else {
      sb.append(this.emp_code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("emp_name:");
    if (this.emp_name == null) {
      sb.append("null");
    } else {
      sb.append(this.emp_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gender:");
    if (this.gender == null) {
      sb.append("null");
    } else {
      sb.append(this.gender);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dob:");
    if (this.dob == null) {
      sb.append("null");
    } else {
      sb.append(this.dob);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone_number:");
    if (this.phone_number == null) {
      sb.append("null");
    } else {
      sb.append(this.phone_number);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identification_card:");
    if (this.identification_card == null) {
      sb.append("null");
    } else {
      sb.append(this.identification_card);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date_join:");
    if (this.date_join == null) {
      sb.append("null");
    } else {
      sb.append(this.date_join);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date_left:");
    if (this.date_left == null) {
      sb.append("null");
    } else {
      sb.append(this.date_left);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("note:");
    if (this.note == null) {
      sb.append("null");
    } else {
      sb.append(this.note);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("emp_mng:");
    sb.append(this.emp_mng);
    first = false;
    if (!first) sb.append(", ");
    sb.append("emp_department:");
    sb.append(this.emp_department);
    first = false;
    if (!first) sb.append(", ");
    sb.append("emp_title:");
    sb.append(this.emp_title);
    first = false;
    if (!first) sb.append(", ");
    sb.append("role:");
    sb.append(this.role);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (emp_code == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'emp_code' was not present! Struct: " + toString());
    }
    if (date_join == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'date_join' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EmployeeStandardSchemeFactory implements SchemeFactory {
    public EmployeeStandardScheme getScheme() {
      return new EmployeeStandardScheme();
    }
  }

  private static class EmployeeStandardScheme extends StandardScheme<Employee> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Employee struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EMP_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.emp_code = iprot.readString();
              struct.setEmp_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.emp_name = iprot.readString();
              struct.setEmp_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gender = iprot.readString();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DOB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dob = iprot.readString();
              struct.setDobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PHONE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone_number = iprot.readString();
              struct.setPhone_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IDENTIFICATION_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identification_card = iprot.readString();
              struct.setIdentification_cardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DATE_JOIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date_join = iprot.readString();
              struct.setDate_joinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DATE_LEFT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date_left = iprot.readString();
              struct.setDate_leftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.note = iprot.readString();
              struct.setNoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EMP_MNG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.emp_mng = iprot.readI32();
              struct.setEmp_mngIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // EMP_DEPARTMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.emp_department = iprot.readI32();
              struct.setEmp_departmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EMP_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.emp_title = iprot.readI32();
              struct.setEmp_titleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.role = iprot.readI32();
              struct.setRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Employee struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.emp_code != null) {
        oprot.writeFieldBegin(EMP_CODE_FIELD_DESC);
        oprot.writeString(struct.emp_code);
        oprot.writeFieldEnd();
      }
      if (struct.emp_name != null) {
        oprot.writeFieldBegin(EMP_NAME_FIELD_DESC);
        oprot.writeString(struct.emp_name);
        oprot.writeFieldEnd();
      }
      if (struct.gender != null) {
        oprot.writeFieldBegin(GENDER_FIELD_DESC);
        oprot.writeString(struct.gender);
        oprot.writeFieldEnd();
      }
      if (struct.dob != null) {
        oprot.writeFieldBegin(DOB_FIELD_DESC);
        oprot.writeString(struct.dob);
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.phone_number != null) {
        oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.phone_number);
        oprot.writeFieldEnd();
      }
      if (struct.identification_card != null) {
        oprot.writeFieldBegin(IDENTIFICATION_CARD_FIELD_DESC);
        oprot.writeString(struct.identification_card);
        oprot.writeFieldEnd();
      }
      if (struct.date_join != null) {
        oprot.writeFieldBegin(DATE_JOIN_FIELD_DESC);
        oprot.writeString(struct.date_join);
        oprot.writeFieldEnd();
      }
      if (struct.date_left != null) {
        oprot.writeFieldBegin(DATE_LEFT_FIELD_DESC);
        oprot.writeString(struct.date_left);
        oprot.writeFieldEnd();
      }
      if (struct.note != null) {
        oprot.writeFieldBegin(NOTE_FIELD_DESC);
        oprot.writeString(struct.note);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EMP_MNG_FIELD_DESC);
      oprot.writeI32(struct.emp_mng);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EMP_DEPARTMENT_FIELD_DESC);
      oprot.writeI32(struct.emp_department);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EMP_TITLE_FIELD_DESC);
      oprot.writeI32(struct.emp_title);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROLE_FIELD_DESC);
      oprot.writeI32(struct.role);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EmployeeTupleSchemeFactory implements SchemeFactory {
    public EmployeeTupleScheme getScheme() {
      return new EmployeeTupleScheme();
    }
  }

  private static class EmployeeTupleScheme extends TupleScheme<Employee> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Employee struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeString(struct.emp_code);
      oprot.writeString(struct.date_join);
      BitSet optionals = new BitSet();
      if (struct.isSetEmp_name()) {
        optionals.set(0);
      }
      if (struct.isSetGender()) {
        optionals.set(1);
      }
      if (struct.isSetDob()) {
        optionals.set(2);
      }
      if (struct.isSetAddress()) {
        optionals.set(3);
      }
      if (struct.isSetPhone_number()) {
        optionals.set(4);
      }
      if (struct.isSetIdentification_card()) {
        optionals.set(5);
      }
      if (struct.isSetDate_left()) {
        optionals.set(6);
      }
      if (struct.isSetNote()) {
        optionals.set(7);
      }
      if (struct.isSetEmp_mng()) {
        optionals.set(8);
      }
      if (struct.isSetEmp_department()) {
        optionals.set(9);
      }
      if (struct.isSetEmp_title()) {
        optionals.set(10);
      }
      if (struct.isSetRole()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetEmp_name()) {
        oprot.writeString(struct.emp_name);
      }
      if (struct.isSetGender()) {
        oprot.writeString(struct.gender);
      }
      if (struct.isSetDob()) {
        oprot.writeString(struct.dob);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetPhone_number()) {
        oprot.writeString(struct.phone_number);
      }
      if (struct.isSetIdentification_card()) {
        oprot.writeString(struct.identification_card);
      }
      if (struct.isSetDate_left()) {
        oprot.writeString(struct.date_left);
      }
      if (struct.isSetNote()) {
        oprot.writeString(struct.note);
      }
      if (struct.isSetEmp_mng()) {
        oprot.writeI32(struct.emp_mng);
      }
      if (struct.isSetEmp_department()) {
        oprot.writeI32(struct.emp_department);
      }
      if (struct.isSetEmp_title()) {
        oprot.writeI32(struct.emp_title);
      }
      if (struct.isSetRole()) {
        oprot.writeI32(struct.role);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Employee struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.emp_code = iprot.readString();
      struct.setEmp_codeIsSet(true);
      struct.date_join = iprot.readString();
      struct.setDate_joinIsSet(true);
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.emp_name = iprot.readString();
        struct.setEmp_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gender = iprot.readString();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dob = iprot.readString();
        struct.setDobIsSet(true);
      }
      if (incoming.get(3)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(4)) {
        struct.phone_number = iprot.readString();
        struct.setPhone_numberIsSet(true);
      }
      if (incoming.get(5)) {
        struct.identification_card = iprot.readString();
        struct.setIdentification_cardIsSet(true);
      }
      if (incoming.get(6)) {
        struct.date_left = iprot.readString();
        struct.setDate_leftIsSet(true);
      }
      if (incoming.get(7)) {
        struct.note = iprot.readString();
        struct.setNoteIsSet(true);
      }
      if (incoming.get(8)) {
        struct.emp_mng = iprot.readI32();
        struct.setEmp_mngIsSet(true);
      }
      if (incoming.get(9)) {
        struct.emp_department = iprot.readI32();
        struct.setEmp_departmentIsSet(true);
      }
      if (incoming.get(10)) {
        struct.emp_title = iprot.readI32();
        struct.setEmp_titleIsSet(true);
      }
      if (incoming.get(11)) {
        struct.role = iprot.readI32();
        struct.setRoleIsSet(true);
      }
    }
  }

}

